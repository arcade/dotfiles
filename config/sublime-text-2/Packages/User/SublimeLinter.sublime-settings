/*
    SublimeLinter default settings
*/
{
    /*
        Sets the mode in which SublimeLinter runs:

        true - Linting occurs in the background as you type (the default).
        false - Linting only occurs when you initiate it.
        "load-save" - Linting occurs only when a file is loaded and saved.
    */
    "sublimelinter": true,

    /*
        Maps linters to executables for non-built in linters. If the executable
        is not in the default system path, or on posix systems in /usr/local/bin
        or ~/bin, then you must specify the full path to the executable.
        Linter names should be lowercase.

        This is the effective default map; your mappings may override these.

        "sublimelinter_executable_map":
        {
            "perl": "perl",
            "php": "php",
            "ruby": "ruby"
        },
    */
    "sublimelinter_executable_map":
    {
    },

    /*
        Maps syntax names to linters. This allows variations on a syntax
        (for example "Python (Django)") to be linted. The key is
        the base filename of the .tmLanguage syntax files, and the value
        is the linter name (lowercase) the syntax maps to.
    */
    "sublimelinter_syntax_map":
    {
        "Python Django": "python"
    },

    // An array of linter names to disable. Names should be lowercase.
    "sublimelinter_disable":
    [
    ],

    /*
        The minimum delay in seconds (fractional seconds are okay) before
        a linter is run when the "sublimelinter" setting is true. This allows
        you to have background linting active, but defer the actual linting
        until you are idle. When this value is greater than the built in linting delay,
        errors are erased when the file is modified, since the assumption is
        you don't want to see errors while you type.
    */
    "sublimelinter_delay": 0,

    // If true, lines with errors or warnings will be filled in with the outline color.
    "sublimelinter_fill_outlines": false,

    // If true, lines with errors or warnings will have a gutter mark.
    "sublimelinter_gutter_marks": false,

    // If true, the find next/previous error commands will wrap.
    "sublimelinter_wrap_find": false,

    // If true, when the file is saved any errors will appear in a popup list
    "sublimelinter_popup_errors_on_save": false,

    // Javascript linter: "gjslint" to use the closure javascript linter (if available),
    // or "jshint" to use the built in jshint linter.
    "javascript_linter": "jshint",

    // jshint: options for linting JavaScript. See http://jshint.com/#docs for more info.
    // By deault, eval is allowed.
    "jshint_options":
    {
        // defaults
        "evil": true,
        "regexdash": true,
        "wsh": true,
        "sub": true,

        // enforcing
        "curly": true,          // enforce curly braces even in cases where they aren't necessary
        "forin": true,          // enforce filtering of for in loops for own properties
        "immed": true,          // warn about immediate function invocation without wrapping in parantheses
        "newcap": true,         // enforce capitalization of constructor names
        "noarg": true,          // warn about using arguments.callee or arguments.caller
        "noempty": true,        // warn about empty blocks of code
        "undef": true,          // warn about usage of undefined variables
        "strict": true,         // enforce that all functions be un in strict mode
        "trailing": true,       // enforce not having trailing whitespace

        // relaxing
        "boss": true,           // suppress warnings about assignements in places where comparisons are expected
        "es5": true,            // suppress warnings when es5 features are used
        "esnext": true,         // suppress warnings when es.next functions are used
        "expr": true,           // suppress warnings about expressions instead of function calls
        "globalstrict": true,   // suppress warnings about global strict mode
        "loopfunc": true,       // suppress warnings about functions inside loops
        "supernew": true,       // suppress warnings about using wierd constructs for the new operator

        // enviroments
        "browser": true,        // assume that code will run in a browser
        "devel": true,          // assume that development functions are available
        "jquery": true,         // assume that jQuery is available
        "node": true            // assume that we will run in a nodejs enviroment
    },

    // A list of command line options to send to gjslint. --nobeep is always sent.
    "gjslint_options":
    [
    ],

    // A list of gjslint error numbers to ignore. The list of error codes is here:
    // http://closure-linter.googlecode.com/svn/trunk/closure_linter/errors.py
    "gjslint_ignore":
    [
        110  // line too long
    ],

    // A list of pep8 error numbers to ignore. By default "line too long" errors are ignored.
    // The list of error codes is in this file: https://github.com/jcrocholl/pep8/blob/master/pep8.py.
    // Search for "Ennn:", where nnn is a 3-digit number.
    "pep8_ignore":
    [
        "E501"
    ],

    /*
        If you use SublimeLinter for pyflakes checks, you can ignore some of the "undefined name xxx"
        errors (comes in handy if you work with post-processors, globals/builtins available only at runtime, etc.).
        You can control what names will be ignored with the user setting "pyflakes_ignore".

        Example:

        "pyflakes_ignore":
            [
                "some_custom_builtin_o_mine",
                "A_GLOBAL_CONSTANT"
            ],
    */
    "pyflakes_ignore":
    [
    ],

    /*
        Ordinarily pyflakes will issue a warning when 'from foo import *' is used,
        but it is ignored since the warning is not that helpful. If you want to see this warning,
        set this option to false.
    */
    "pyflakes_ignore_import_*": true,

    // Objective-J: if true, non-ascii characters are flagged as an error.
    "sublimelinter_objj_check_ascii": false,

    // Set to true to highlight annotations
    "sublimelinter_notes": false,

    // The set of annotation phrases to highlight
    "annotations": ["TODO", "README", "FIXME"]
}
